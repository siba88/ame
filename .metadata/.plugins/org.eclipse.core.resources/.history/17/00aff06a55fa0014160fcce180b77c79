package at.ac.tuwien.big.momot.examples.university.unique;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

import org.apache.commons.io.FileUtils;
import org.eclipse.emf.common.util.Diagnostic;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.util.Diagnostician;
import org.eclipse.emf.henshin.interpreter.EGraph;
import org.moeaframework.core.NondominatedPopulation;
import org.moeaframework.core.Solution;
import org.moeaframework.core.operator.OnePointCrossover;
import org.moeaframework.core.operator.TournamentSelection;

import at.ac.tuwien.big.moea.run.executor.EvolutionarySearchExecutorFactory;
import at.ac.tuwien.big.moea.run.experiment.Experiment;
import at.ac.tuwien.big.moea.run.listener.SeedRuntimePrintListener;
import at.ac.tuwien.big.moea.util.CastUtil;
import at.ac.tuwien.big.momot.MomotFactory;
import at.ac.tuwien.big.momot.MomotOrchestration;
import at.ac.tuwien.big.momot.fitness.dimension.AbstractEGraphFitnessDimension;
import at.ac.tuwien.big.momot.fitness.dimension.MatchSolutionLengthDimension;
import at.ac.tuwien.big.momot.match.ExecutionResult;
import at.ac.tuwien.big.momot.operator.mutation.MatchParameterMutation;
import at.ac.tuwien.big.momot.operator.mutation.MatchPlaceholderMutation;
import at.ac.tuwien.big.momot.rule.parameter.random.RandomIntegerValue;
import at.ac.tuwien.big.momot.solution.MatchSolution;
import at.ac.tuwien.big.momot.solution.repair.MatchPlaceholderSolutionRepairer;

public class UniversityUniqueOrchestration {
	
private static final String MODEL_EXTENSION = ".xmi";
	
	private static final String RULES = "university.henshin";
	private static final String MODEL_DIRECTORY = "model/";
	private static final String OUTPUT_DIRECTORY = "output/";

	private static final String RULE_CREATESTUDENT_ID = "createStudent.id";
	private static final String RULE_ASSIGNSTUDENT_ID = "assignStudent.id";
	private static final String RULE_ASSIGNSTUDENT_COURSE = "assignStudent.course";
	
	private static final int SEARCH_POPULATION = 100;
	private static final int SEARCH_ITERATIONS = 200;
	private static final int SEARCH_SOLUTIONLENGTH = 10;
	
	public static MomotOrchestration createOrchestration(String initialModel) {
		MomotFactory factory = new MomotFactory(MODEL_DIRECTORY, RULES);
		EGraph graph = factory.loadGraph(initialModel);
		
		MomotOrchestration orchestration = new MomotOrchestration(factory, graph, SEARCH_SOLUTIONLENGTH);
			
		// use the fitness function
		orchestration.getFitnessFunction().saveExecutionResult(true);
		orchestration.getFitnessFunction().addObjective(new AbstractEGraphFitnessDimension("NrViolations") {
			@Override
			protected double evaluate(
					MatchSolution solution,
					ExecutionResult executionResult) {
				EGraph result = executionResult.getResultGraph();
				EObject root = result.getRoots().get(0);
				Diagnostic validation = Diagnostician.INSTANCE.validate(root);
				return validation.getChildren().size();
			}
		});		
		orchestration.getFitnessFunction().addObjective(new MatchSolutionLengthDimension());
		orchestration.getFitnessFunction().setSolutionRepairer(new MatchPlaceholderSolutionRepairer());
			
		// specify parameters of interest (preserved in the solution sequence, see output)
		orchestration.getParameterManager().preserveParameters(
				RULE_CREATESTUDENT_ID, 
				RULE_ASSIGNSTUDENT_ID,
				RULE_ASSIGNSTUDENT_COURSE
		);

		// user parameters, i.e., parameters that can not be matched based on the existing model
		orchestration.getParameterManager().setParameterValue(
				RULE_CREATESTUDENT_ID, 
				new RandomIntegerValue(0, 10));
		
		orchestration.getSolutionPrinter().setPrintPlaceholders(false);
		return orchestration;
	}
	
	public static void addEvolutionarySearch(MomotOrchestration orchestration, Experiment experiment) {
		EvolutionarySearchExecutorFactory<MatchSolution> evolutionaryExecutor = orchestration.createEvolutionaryExecutorFactory(
				SEARCH_POPULATION, 
				SEARCH_ITERATIONS,
				new TournamentSelection(4),
				new OnePointCrossover(1), 
				new MatchPlaceholderMutation(0.1),
				new MatchParameterMutation(0.1, orchestration.getParameterManager())
			);
		
//		experiment.addExecutor("Random", evolutionaryExecutor.createRandomSearchExecutor());
		experiment.addExecutor("NSGA-II", evolutionaryExecutor.createNSGAIIExecutor());
		experiment.addExecutor("NSGA-III", evolutionaryExecutor.createNSGAIIIExecutor(0, 4));
//		experiment.addExecutor("EpsilonMOEA", evolutionaryExecutor.createEpsilonMOEAExecutor(0.05));
	}
	
	public static void saveSolutions(MomotOrchestration orchestration, NondominatedPopulation solutions, String inputModel) {
		String outputPrefix = getOutputModelPrefix(inputModel);
		
		for(Solution solution : solutions) {
			MatchSolution matchSolution = CastUtil.asClass(solution, MatchSolution.class);
			
			if(matchSolution == null)
				continue;
			
			// ensure unique names of output files
			String outputFile = outputPrefix + "_"  
					+ new Double(matchSolution.getObjective(
							orchestration.getFitnessFunction().getObjectiveIndex("NrViolations"))).intValue()
					+ MODEL_EXTENSION;
			try {
				orchestration.save(matchSolution.getStoredResultGraph().copy(null), outputFile);
				System.out.println(outputFile + ": ok");
			} catch(Exception e) {
				System.err.println(outputFile + ": " + e.getMessage());
				e.printStackTrace();
			}
		}
	}
	
	public static String getOutputModelPrefix(String inputModel) {
		String subDirectory = OUTPUT_DIRECTORY;
		String filePrefix = inputModel.substring(0, inputModel.length() - MODEL_EXTENSION.length());
		try {
			subDirectory += filePrefix + "/";
			FileUtils.forceMkdir(new File(MODEL_DIRECTORY + subDirectory));
		} catch (IOException e) {
			e.printStackTrace();
		}
		return subDirectory + filePrefix;
	}
	
	public static String getReferenceFile(String inputModel) {
		String subDirectory = MODEL_DIRECTORY + OUTPUT_DIRECTORY;
		String filePrefix = inputModel.substring(0, inputModel.length() - MODEL_EXTENSION.length());
		try {
			subDirectory += filePrefix + "/";
			FileUtils.forceMkdir(new File(subDirectory));
			FileUtils.cleanDirectory(new File(subDirectory));
		} catch (IOException e) {
			e.printStackTrace();
		}
		return subDirectory + filePrefix + "_reference.csv";
	}
	
	public static void printReferenceSet(MomotOrchestration orchestration, String referenceFile) {
		System.out.println("------------------------------------");
		System.out.println("ReferenceSet" + orchestration.getFitnessFunction().getObjectiveNames() + "");
		System.out.println("------------------------------------");
		try {
			System.out.println(new String(Files.readAllBytes(Paths.get(referenceFile))));
		} catch (IOException e) {
			System.out.println("Error reading reference file: " + e.getMessage());
		}
	}
	
	
	public static void repairModel(String inputModel, int algorithmRuns) {
		MomotOrchestration orchestration = createOrchestration(inputModel);		
		
		String referenceFile = getReferenceFile(inputModel);
		
		Experiment experiment = new Experiment()
			.useProgressListener(new SeedRuntimePrintListener())
			.saveReferenceFile(getReferenceFile(inputModel))
			.printLogging(true);
				
		addEvolutionarySearch(orchestration, experiment);
		
		experiment.run(algorithmRuns); // run each provided algorithm n times
		
		NondominatedPopulation solutions = experiment.getReferenceSet();
		System.out.println(orchestration.print(solutions));
		printReferenceSet(orchestration, referenceFile);
		
		saveSolutions(orchestration, solutions, inputModel);		
	}
	
	public static void main(String[] args) throws IOException {	
		repairModel("University_4.xmi", 1);
	}

}
